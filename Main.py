# Main.py
# Aiogram 3.x ‚Äî –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω –Ω–∞ OpenRouter (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# –ö–æ–º–∞–Ω–¥—ã:
# /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞
# /help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
# /setmodel <model> ‚Äî —Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ –ª–µ—Ç—É (–Ω–∞–ø—Ä.: meta-llama/llama-3.1-8b-instruct)
# /persona <—Ç–µ–∫—Å—Ç> ‚Äî –∑–∞–¥–∞–Ω–∏–µ ¬´—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞¬ª (—Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞) –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
# /reset ‚Äî —Å–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
# –õ—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –¥–∏–∞–ª–æ–≥ —Å –ò–ò (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)

import os
import asyncio
import logging
from typing import Dict, List

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.command import CommandObject
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionMiddleware
from aiogram.client.default import DefaultBotProperties

from dotenv import load_dotenv

# –∑–∞–≥—Ä—É–∑–∏–º .env –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
load_dotenv()

# --- ENV / Config ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required (put it in Render env or .env)")

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "")
AI_MODEL = os.getenv("AI_MODEL", "meta-llama/llama-3.1-8b-instruct")

# –õ—ë–≥–∫–∞—è ¬´–ø–∞–º—è—Ç—å¬ª –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
PERSONA_DEFAULT = (
    "–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –±–µ—Å–µ–¥—É, –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, "
    "–ø–æ–º–æ–≥–∞–π —Å –∏–¥–µ—è–º–∏ –∏ –ø–ª–∞–Ω–∞–º–∏, –ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏."
)
user_persona: Dict[int, str] = {}                    # tg_id -> system prompt
user_dialogs: Dict[int, List[Dict[str, str]]] = {}   # tg_id -> –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∏
MAX_TURNS = 8  # –≥–ª—É–±–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (user/assistant –ø–∞—Ä)

# --- Logging ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("ai-companion")

# --- OpenRouter Chat Completion ---
async def openrouter_chat(messages: List[Dict[str, str]], model: str) -> str:
    """
    messages: [{"role":"system/user/assistant","content":"..."}]
    """
    if not OPENROUTER_API_KEY:
        return "OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –∑–∞–¥–∞–Ω OPENROUTER_API_KEY."

    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": model,
        "messages": messages,
        "temperature": 0.6,
    }
    try:
        timeout = aiohttp.ClientTimeout(total=45)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, headers=headers, json=payload) as resp:
                if resp.status != 200:
                    txt = await resp.text()
                    return f"–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò (OpenRouter {resp.status}). {txt[:300]}"
                data = await resp.json()
                return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenRouter: {e}"

def get_persona_for(user_id: int) -> str:
    return user_persona.get(user_id, PERSONA_DEFAULT)

def ensure_dialog(user_id: int):
    if user_id not in user_dialogs:
        user_dialogs[user_id] = []

def push_user_message(user_id: int, content: str):
    ensure_dialog(user_id)
    user_dialogs[user_id].append({"role": "user", "content": content})
    if len(user_dialogs[user_id]) > MAX_TURNS * 2:
        user_dialogs[user_id] = user_dialogs[user_id][-MAX_TURNS * 2 :]

def push_assistant_message(user_id: int, content: str):
    ensure_dialog(user_id)
    user_dialogs[user_id].append({"role": "assistant", "content": content})
    if len(user_dialogs[user_id]) > MAX_TURNS * 2:
        user_dialogs[user_id] = user_dialogs[user_id][-MAX_TURNS * 2 :]

# --- Handlers ---
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω üòä\n\n"
        "–ù–∞–ø–∏—à–∏, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–µ–Ω—å, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –ø–æ–º–æ—â–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /persona &lt;—Ö–∞—Ä–∞–∫—Ç–µ—Ä&gt; ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å –∏ —Ä–æ–ª—å –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞\n"
        "‚Ä¢ /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "‚Ä¢ /setmodel &lt;model&gt; ‚Äî —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å OpenRouter\n"
        "‚Ä¢ /help ‚Äî –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
    )

async def cmd_help(message: Message):
    await message.answer(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "‚Äî –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã.\n"
        "‚Äî /persona &lt;—Ç–µ–∫—Å—Ç&gt; –∑–∞–¥–∞—ë—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—Ö–∞—Ä–∞–∫—Ç–µ—Ä/—Ä–æ–ª—å), –Ω–∞–ø—Ä.:\n"
        "   /persona –°–ø–æ–∫–æ–π–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≥–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É\n"
        "‚Äî /reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π.\n"
        "‚Äî /setmodel &lt;model&gt; –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–æ–¥–µ–ª—å (–ø—Ä–∏–º–µ—Ä: meta-llama/llama-3.1-8b-instruct).\n"
        "–ó–∞–º–µ—á–∞–Ω–∏–µ: –ø–∞–º—è—Ç—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–µ –∏ –æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ.",
    )

async def cmd_setmodel(message: Message, command: CommandObject):
    global AI_MODEL
    new_model = (command.args or "").strip()
    if not new_model:
        await message.answer(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <code>{AI_MODEL}</code>", parse_mode=ParseMode.HTML)
        return
    AI_MODEL = new_model
    await message.answer(f"–û–∫, –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: <code>{AI_MODEL}</code>", parse_mode=ParseMode.HTML)

async def cmd_persona(message: Message, command: CommandObject):
    raw = (command.args or "").strip()
    if not raw:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /persona &lt;—Ö–∞—Ä–∞–∫—Ç–µ—Ä&gt;\n"
            "–ü—Ä–∏–º–µ—Ä: /persona –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ—É—á –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é, –ø–æ —à–∞–≥–∞–º –¥–∞—ë—Ç —Å–æ–≤–µ—Ç—ã",
        )
        return
    user_persona[message.from_user.id] = raw
    await message.answer("–ì–æ—Ç–æ–≤–æ! –•–∞—Ä–∞–∫—Ç–µ—Ä –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")

async def cmd_reset(message: Message):
    user_persona.pop(message.from_user.id, None)
    user_dialogs.pop(message.from_user.id, None)
    await message.answer("–°–±—Ä–æ—Å–∏–ª —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞. –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")

async def talk(message: Message):
    uid = message.from_user.id
    ensure_dialog(uid)
    push_user_message(uid, message.text or "")

    messages = [{"role": "system", "content": get_persona_for(uid)}]
    messages.extend(user_dialogs[uid])

    await message.chat.do("typing")
    reply = await openrouter_chat(messages, AI_MODEL)
    push_assistant_message(uid, reply)

    # Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî —à–ª—ë–º –±–µ–∑ HTML-–ø–∞—Ä—Å–∏–Ω–≥–∞, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ <...>
    if len(reply) <= 3900:
        await message.answer(reply, parse_mode=None)
    else:
        i = 0
        while i < len(reply):
            await message.answer(reply[i : i + 3900], parse_mode=None)
            i += 3900

# --- App factory ---
def create_dp() -> Dispatcher:
    dp = Dispatcher(storage=MemoryStorage())
    dp.message.middleware(ChatActionMiddleware())

    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_setmodel, Command("setmodel"))
    dp.message.register(cmd_persona, Command("persona"))
    dp.message.register(cmd_reset, Command("reset"))
    dp.message.register(talk, F.text)  # –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç ‚Äî –≤ –¥–∏–∞–ª–æ–≥

    return dp

async def main():
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = create_dp()
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Stopped by user")
